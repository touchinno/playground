{"version":3,"sources":["views/Word/Word.js"],"names":["wordListStyle","overflowY","height","window","innerHeight","dropZoneStyle","display","verticalAlign","textAlign","padding","border","cursor","InputWords","props","_useState","useState","_useState2","Object","_home_runner_work_playground_playground_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_8__","name","setName","_useState3","_useState4","url","setUrl","react__WEBPACK_IMPORTED_MODULE_9___default","a","createElement","react__WEBPACK_IMPORTED_MODULE_9__","reactstrap__WEBPACK_IMPORTED_MODULE_10__","reactstrap__WEBPACK_IMPORTED_MODULE_11__","xs","react_files__WEBPACK_IMPORTED_MODULE_36___default","className","ref","files","style","onChange","importFile","onError","error","console","debug","accepts","multiple","maxFiles","maxFileSize","minFileSize","clickable","reactstrap__WEBPACK_IMPORTED_MODULE_12__","divider","reactstrap__WEBPACK_IMPORTED_MODULE_13__","reactstrap__WEBPACK_IMPORTED_MODULE_14__","reactstrap__WEBPACK_IMPORTED_MODULE_15__","type","id","placeholder","e","target","value","reactstrap__WEBPACK_IMPORTED_MODULE_16__","addonType","reactstrap__WEBPACK_IMPORTED_MODULE_17__","color","onClick","importUrl","Word","_this","_home_runner_work_playground_playground_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","this","_home_runner_work_playground_playground_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_home_runner_work_playground_playground_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","onShowAlert","message","setState","alertVisible","alertMessage","JSON","stringify","setTimeout","handleSearchPattern","_ref","_home_runner_work_playground_playground_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_runner_work_playground_playground_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","event","wrap","_context","prev","next","searchPattern","stop","_x","apply","arguments","state","groupCollapse","viewCollapse","loadWordModal","listWords","activeWord","activeDef","selectedWord","validate","audioPlay","iframe","iframe2","React","createRef","toggle","bind","_home_runner_work_playground_playground_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_7__","handleWordPlay","searchWord","lookupWord","word","_this2","preventDefault","_this$state","loaded","definition","Promise","all","dictionaryApi","translateApi","then","response","Array","isArray","phonetics","result","translatedText","catch","_this3","_this$state2","checked","toLowerCase","trim","_this4","audio","play","Audio","speechSynthesis","speaking","utterance","SpeechSynthesisUtterance","onend","elapsedTime","speak","_this5","length","blob","Blob","reader","FileReader","addEventListener","split","forEach","isDone","readAsText","current","removeFiles","_this6","downloadUrl","startsWith","fetch","method","text","ok","s","n","arr","sort","Math","random","join","genHiddenWord","ch","num","r","i","_this7","_this$state3","reactstrap__WEBPACK_IMPORTED_MODULE_18__","reactstrap__WEBPACK_IMPORTED_MODULE_19__","reactstrap__WEBPACK_IMPORTED_MODULE_20__","reactstrap__WEBPACK_IMPORTED_MODULE_21__","isOpen","reactstrap__WEBPACK_IMPORTED_MODULE_22__","reactstrap__WEBPACK_IMPORTED_MODULE_23__","reactstrap__WEBPACK_IMPORTED_MODULE_24__","reactstrap__WEBPACK_IMPORTED_MODULE_25__","reactstrap__WEBPACK_IMPORTED_MODULE_26__","onKeyDown","key","reactstrap__WEBPACK_IMPORTED_MODULE_27__","role","keys","map","index","reactstrap__WEBPACK_IMPORTED_MODULE_28__","action","active","reactstrap__WEBPACK_IMPORTED_MODULE_29__","onSubmit","shuffleWord","aria-label","reactstrap__WEBPACK_IMPORTED_MODULE_30__","htmlFor","valid","invalid","reactstrap__WEBPACK_IMPORTED_MODULE_31__","block","disabled","_coreui_react__WEBPACK_IMPORTED_MODULE_35__","variant","size","reactstrap__WEBPACK_IMPORTED_MODULE_32__","reactstrap__WEBPACK_IMPORTED_MODULE_33__","htmlParse","replace","domNode","attribs","width","Component"],"mappings":"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","file":"static/js/16.284e9060.chunk.js","sourcesContent":["import React, {Component, Fragment, useState} from 'react';\nimport {\n  Alert,\n  Badge,\n  Button,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  Col,\n  Collapse,\n  DropdownItem,\n  Form,\n  FormFeedback,\n  FormGroup,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  Label,\n  ListGroup,\n  ListGroupItem,\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  Row,\n} from 'reactstrap';\n\nimport {dictionaryApi, translateApi} from '../../util/APIUtils';\nimport {AppSwitch} from \"@coreui/react\";\n\nimport Files from 'react-files';\nimport htmlParse from \"html-react-parser\";\n\nconst wordListStyle = { overflowY: 'auto', height: window.innerHeight*3/5 };\n\nconst dropZoneStyle = {\n  display: \"table-cell\",\n  verticalAlign: \"middle\",\n  textAlign: \"center\",\n  padding: \"10px\",\n  border: \"1px dashed #D3D3D3\",\n  cursor: \"pointer\",\n};\n\nconst InputWords = (props) => {\n  const importFile = (files) => props.importFile(files);\n  const importUrl = (name, url) => props.importUrl(name, url);\n\n  const [name, setName] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n\n  return (\n    <Fragment>\n      <Row>\n        <Col xs=\"12\">\n          <div>\n            <Files className=\"files-dropzone-list\"\n                   ref={props.files}\n                   style={dropZoneStyle}\n                   onChange={(files) => importFile(files)}\n                   onError={(error) => { console.debug(error); }}\n                   accepts={[\".csv\", \"text/csv\"]}\n                   multiple\n                   maxFiles={1}\n                   maxFileSize={10240000}\n                   minFileSize={0}\n                   clickable>\n              영단어 파일을 여기에 가져놓으~~~\n            </Files>\n          </div>\n        </Col>\n      </Row>\n      <DropdownItem divider />\n      <Row>\n        <Col xs=\"12\">\n          <FormGroup>\n            <InputGroup>\n              <Input type=\"text\" id=\"google_spreadsheet\" name=\"google_spreadsheet\" placeholder=\"google spreadsheet id\"\n                     onChange={(e) => { setName(e.target.name); setUrl(e.target.value); }} />\n              <InputGroupAddon addonType=\"append\">\n                <Button type=\"button\" color=\"danger\" onClick={() => importUrl(name, url)}><i className=\"fa fa-refresh\"></i></Button>\n              </InputGroupAddon>\n            </InputGroup>\n          </FormGroup>\n        </Col>\n      </Row>\n    </Fragment>\n  );\n}\n\nconst dict_cambridge = 'https://dictionary.cambridge.org/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4-%ED%95%9C%EA%B5%AD%EC%96%B4/';\nconst dict_merriam = 'https://www.merriam-webster.com/dictionary/';\n\nclass Word extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      alertVisible: false,\n      alertMessage: \"\",\n\n      groupCollapse: true,\n      viewCollapse: true,\n\n      loadWordModal: false,\n\n      searchPattern: \"\",\n\n      listWords: {},\n      activeWord: \"\",\n      activeDef: \"\",\n      selectedWord: {},\n\n      validate: {},\n      audioPlay: false,\n\n      iframe: \"\",\n      iframe2: \"\",\n    };\n\n    this.files = React.createRef();\n\n    this.toggle = this.toggle.bind(this);\n    this.validate = this.validate.bind(this);\n    this.loadWordModal = this.loadWordModal.bind(this);\n    this.handleWordPlay = this.handleWordPlay.bind(this);\n\n    this.searchWord = this.searchWord.bind(this);\n    this.handleSearchPattern = this.handleSearchPattern.bind(this);\n\n    this.importFile = this.importFile.bind(this);\n    this.importUrl = this.importUrl.bind(this);\n    this.lookupWord = this.lookupWord.bind(this);\n  }\n\n  componentDidMount() {\n  }\n\n  onShowAlert = (message) => {\n    this.setState({\n      alertVisible: true,\n      alertMessage: JSON.stringify(message),\n    }, () => {\n      window.setTimeout(() => {\n        this.setState({ alertVisible: false })\n      }, 10000);\n    });\n  }\n\n  toggle(e, word) {\n    e.preventDefault();\n    const { activeWord, listWords } = this.state;\n\n    if (activeWord !== word) {\n      let selectedWord = listWords[word];\n\n      console.debug(\"selected\", selectedWord);\n\n      if (!selectedWord.loaded) {\n        Promise.all([\n          dictionaryApi(\"en\", word),\n          translateApi(\"en\", \"ko\", word)\n        ]).then(response => {\n          console.debug(\"dic=\", response[0], response[1]);\n\n          selectedWord.name = word;\n          if (Array.isArray(response[0]) && response[0] &&\n            Array.isArray(response[0][0].phonetics) && response[0][0].phonetics) {\n            selectedWord.phonetics = response[0][0].phonetics[0];\n          }\n          if (response[1].message) {\n            selectedWord.definition = ((response[1].message || {}).result || {}).translatedText;\n          }\n          selectedWord.loaded = true;\n\n          this.setState({\n            activeWord: word,\n            activeDef: selectedWord.definition,\n            selectedWord: selectedWord,\n            validate: {},\n          });\n        }).catch(error => {\n          this.onShowAlert(error);\n        });\n      } else {\n        this.setState({\n          activeWord: word,\n          activeDef: selectedWord.definition,\n          selectedWord: selectedWord,\n          validate: {},\n        });\n      }\n    }\n  }\n\n  searchWord(event) {\n    event.preventDefault();\n    let { searchPattern } = this.state;\n\n    Promise.all([\n      dictionaryApi(\"en\", searchPattern),\n      translateApi(\"en\", \"ko\", searchPattern)\n    ]).then(response => {\n      console.debug(\"dic=\", response[0], response[1]);\n\n      let selectedWord = {\n        name: searchPattern\n      };\n      if (Array.isArray(response[0]) && response[0] &&\n        Array.isArray(response[0][0].phonetics) && response[0][0].phonetics) {\n        selectedWord.phonetics = response[0][0].phonetics[0];\n      }\n      if (response[1].message) {\n        selectedWord.definition = ((response[1].message || {}).result || {}).translatedText;\n      }\n      selectedWord.loaded = true;\n\n      this.setState({\n        activeWord: searchPattern,\n        activeDef: selectedWord.definition,\n        selectedWord: selectedWord,\n        validate: {},\n      });\n    }).catch(error => {\n      this.onShowAlert(error);\n\n      this.setState({\n        activeWord: \"\",\n        activeDef: \"\",\n        selectedWord: {},\n        validate: {},\n      });\n    });\n  }\n\n  validate(event) {\n    const { validate, selectedWord } = this.state;\n\n    if (selectedWord) {\n      const { target } = event;\n      let value = target.type === 'checkbox' ? target.checked : target.value;\n      const { name } = target;\n\n      validate[name] = (selectedWord[name] || \"\").toLowerCase().trim() === value.toLowerCase().trim();\n\n      this.setState({ validate });\n    }\n  }\n\n  loadWordModal() {\n    this.setState({\n      loadWordModal: !this.state.loadWordModal,\n    });\n  }\n\n  handleWordPlay(event) {\n    event.preventDefault();\n    const { selectedWord } = this.state;\n\n    this.setState({ audioPlay: true });\n\n    if (selectedWord && selectedWord.phonetics && selectedWord.phonetics.audio) {\n      let audio = new Audio(selectedWord.phonetics.audio);\n      let play = audio.play();\n      if (play) {\n        play.then(() => this.setState( { audioPlay: false }) );\n      }\n    } else {\n      if (speechSynthesis) {\n        if (!speechSynthesis.speaking) {\n          let utterance = new SpeechSynthesisUtterance(selectedWord.name);\n          utterance.onend = (event) => {\n            console.debug('speak= ', event.elapsedTime + ' ms');\n            this.setState( { audioPlay: false });\n          }\n          speechSynthesis.speak(utterance);\n        }\n      }\n    }\n  }\n\n  handleSearchPattern = async (event) => {\n    const { target } = event;\n    this.setState({ searchPattern: target.value });\n  }\n\n  importFile(files) {\n    console.debug(files);\n    if (files && files.length > 0) {\n      let blob = new Blob([files[0]], { type: files[0].type });\n\n      const reader = new FileReader();\n      reader.addEventListener('loadend', (e) => {\n        try {\n          console.debug('import=', e.target.result);\n\n          let listWords = {};\n          let words = (e.target.result || \"\").split('\\n');\n          (words || {}).forEach(word => {\n            if (word.trim()) {\n              listWords[word.trim()] = {\n                isDone: false\n              };\n            }\n          });\n\n          this.setState({\n            listWords: listWords,\n            selectedWord: {},\n            validate: {},\n            loadWordModal: !this.state.loadWordModal,\n          });\n        } catch(e) {\n          console.debug('import=', e);\n        }\n      });\n\n      reader.readAsText(blob);\n\n      this.files.current.removeFiles();\n    }\n  }\n\n  importUrl(name, url) {\n    if (name === 'google_spreadsheet' && url) {\n      let downloadUrl = url.trim();\n      if (!downloadUrl.startsWith(\"http\")) {\n        downloadUrl = 'https://docs.google.com/spreadsheets/d/' + downloadUrl + '/export?format=csv';\n      }\n\n      console.debug(\"import=\", name, downloadUrl);\n\n      fetch(downloadUrl, { method: 'GET' })\n        .then(response =>\n          response.text().then(text => {\n            if (response.ok && text) {\n              console.debug(\"import response=\", text);\n\n              let listWords = {};\n              let words = text.split('\\n');\n              (words || {}).forEach(word => {\n                if (word.trim()) {\n                  listWords[word.trim()] = {\n                    isDone: false\n                  };\n                }\n              });\n\n              this.setState({\n                listWords: listWords,\n                selectedWord: {},\n                validate: {},\n                loadWordModal: !this.state.loadWordModal,\n              });\n            }\n          })\n        ).catch(error => {\n          console.debug(\"import error=\", error);\n        });\n    }\n  }\n\n  lookupWord(event) {\n    event.preventDefault();\n\n    const { selectedWord } = this.state;\n\n    if (selectedWord.loaded) {\n      this.setState({\n        iframe: '<iframe src=\"' + dict_cambridge + selectedWord.name + '\"></iframe>',\n        iframe2: '<iframe src=\"' + dict_merriam + selectedWord.name + '\"></iframe>',\n      });\n    }\n  }\n\n  shuffleWord(s) {\n    let n = s;\n    if (n) {\n      if (n.length > 3) {\n        while (n === s) {\n          let arr = s.split('');\n          arr.sort(() => 0.5 - Math.random());\n          n = arr.join('');\n        }\n      } else {\n        n = this.genHiddenWord('⭐', n.length);\n      }\n    }\n    return n;\n  }\n\n  genHiddenWord(ch, num) {\n    let r = ch;\n    for (let i = 1; i < num; i++) {\n      r += ch;\n    }\n    return r;\n  }\n\n  render() {\n    const { listWords, activeWord, activeDef, searchPattern, validate, audioPlay, iframe, iframe2 } = this.state;\n\n    return (\n      <div className=\"animated fadeIn\">\n        <Row>\n          <Col>\n            <Card>\n              <CardHeader>\n                <i className=\"fa fa-align-justify\"/><strong>단어 리스트</strong>\n                <div className=\"card-header-actions\">\n                  <Button type=\"button\" color=\"ghost-warning\" onClick={this.loadWordModal}><i className=\"icon-cloud-download\"/></Button>\n                  <Button color=\"light\" onClick={() => { this.setState({ groupCollapse: !this.state.groupCollapse }); }}><i className=\"icon-arrow-up\"/></Button>\n                  <Badge color=\"warning\">Word</Badge>\n                </div>\n\n                <Modal isOpen={this.state.loadWordModal} toggle={this.loadWordModal}\n                       className={'modal-success ' + this.props.className}>\n                  <ModalHeader toggle={this.loadWordModal}>Load Words</ModalHeader>\n                  <ModalBody>\n                    <InputWords files={this.files} importFile={this.importFile} importUrl={this.importUrl} />\n                  </ModalBody>\n                  <ModalFooter>\n                    <Button color=\"secondary\" onClick={this.loadWordModal}>Cancel</Button>\n                  </ModalFooter>\n                </Modal>\n              </CardHeader>\n              <Collapse isOpen={this.state.groupCollapse}>\n                <CardBody>\n                  <Row>\n                    <Col xs=\"4\">\n                      <FormGroup>\n                        <InputGroup>\n                          <Input type=\"text\" id=\"searchPattern\" name=\"searchPattern\" placeholder=\"Search Pattern\"\n                                 value={searchPattern}\n                                 onChange={ (e) => this.handleSearchPattern(e) }\n                                 onKeyDown={ (e) => {\n                                   if (e.key === 'Enter') {\n                                     this.searchWord(e);\n                                   }\n                                 }}\n                          />\n                          <InputGroupAddon addonType=\"append\">\n                            <Button type=\"button\" color=\"primary\" onClick={this.searchWord}><i className=\"fa fa-search\"/></Button>\n                          </InputGroupAddon>\n                        </InputGroup>\n                      </FormGroup>\n\n                      <ListGroup id=\"list-tab\" role=\"tablist\" style={wordListStyle}>\n                        {\n                          Object.keys(listWords).sort().map((key, index) => {\n                            return (\n                              <ListGroupItem key={key} onClick={(e) => this.toggle(e, key)} action active={activeWord === key}>\n                                {listWords[key].isDone ? key : this.genHiddenWord('⭐', (key || \"\").length)}\n                              </ListGroupItem>\n                            );\n                          })\n                        }\n                      </ListGroup>\n                    </Col>\n                    <Col xs=\"8\">\n                      <Card>\n                        <Form action=\"\" className=\"form-horizontal\" onSubmit={(e) => this.lookupWord(e)}>\n                        <CardHeader>\n                          <blockquote className=\"blockquote\">\n                            <p className=\"mb-0 h2\">\n                              {this.shuffleWord(activeWord)} <span role=\"img\" aria-label=\"donut\">🍩</span> {this.shuffleWord(activeDef)}\n                            </p>\n                          </blockquote>\n                        </CardHeader>\n                        <CardBody>\n                          <Row>\n                            <Col xs=\"12\">\n                              <FormGroup>\n                                <Label htmlFor=\"name\">단어</Label>\n                                <Input type=\"text\" id=\"name\" name=\"name\" placeholder=\"word\"\n                                       valid={validate.name}\n                                       invalid={!validate.name}\n                                       onChange={ (e) => {\n                                         this.validate(e)\n                                       } } />\n                                <FormFeedback invalid>\n                                  단어를 잘 넣으셈!\n                                </FormFeedback>\n                              </FormGroup>\n                            </Col>\n                          </Row>\n                          <Row>\n                            <Col xs=\"12\">\n                              <FormGroup>\n                                <Label htmlFor=\"definition\">뜻</Label>\n                                <Input type=\"text\" id=\"definition\" name=\"definition\" placeholder=\"Definition\"\n                                       valid={validate.definition}\n                                       invalid={!validate.definition}\n                                       onChange={ (e) => {\n                                         this.validate(e)\n                                       } } />\n                                <FormFeedback invalid>\n                                  뜻을 잘 넣으셈!\n                                </FormFeedback>\n                              </FormGroup>\n                            </Col>\n                          </Row>\n                          <DropdownItem divider />\n                          <Row>\n                            <Col xs=\"12\">\n                              <FormGroup>\n                              </FormGroup>\n                            </Col>\n                          </Row>\n                          <Row>\n                            <Col xs=\"6\">\n                            </Col>\n                            <Col xs=\"4\">\n                              <Button color=\"light\" className=\"btn-pill\" block disabled>듣기</Button>\n                            </Col>\n                            <Col xs=\"2\">\n                              <AppSwitch name=\"enabled\" className={'mx-1'} variant={'pill'} color={'primary'} size={'lg'} checked={audioPlay}\n                                         onChange={ (e) => {\n                                           this.handleWordPlay(e)\n                                         } } />\n                            </Col>\n                          </Row>\n                        </CardBody>\n                        <CardFooter>\n                          <Row>\n                            <Col xs=\"8\">\n                            </Col>\n                            <Col xs=\"4\">\n                              <Button type=\"submit\" color=\"ghost-primary\" size=\"nm\" block><i className=\"fa fa-database\"/> 상세보기</Button>\n                            </Col>\n                          </Row>\n                          {this.state.alertVisible &&\n                            <Fragment>\n                            <DropdownItem divider/>\n                            <Row>\n                              <Col xs=\"12\">\n                                <Alert color=\"warning\" isOpen={this.state.alertVisible} >\n                                {this.state.alertMessage}\n                                </Alert>\n                              </Col>\n                            </Row>\n                            </Fragment>\n                          }\n                        </CardFooter>\n                        </Form>\n                      </Card>\n\n                      {iframe2 &&\n                      <Row>\n                        <Col>\n                          {\n                            htmlParse(iframe2, {\n                              replace: domNode => {\n                                if (domNode.name === 'iframe') {\n                                  domNode.attribs.width = \"100%\";\n                                  domNode.attribs.height = \"320\";\n                                }\n                              }\n                            })\n                          }\n                        </Col>\n                      </Row>\n                      }\n                    </Col>\n                  </Row>\n                </CardBody>\n              <CardFooter>\n              </CardFooter>\n              </Collapse>\n            </Card>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <Card>\n              <CardHeader>\n                <i className=\"fa fa-align-justify\"/><strong>Word Dictionary</strong> <small/>\n                <div className=\"card-header-actions\">\n                  <Button color=\"light\" onClick={() => { this.setState({ viewCollapse: !this.state.viewCollapse }); }}><i className=\"icon-arrow-up\"/></Button>\n                  <Badge>Word</Badge>\n                </div>\n              </CardHeader>\n              <Collapse isOpen={this.state.viewCollapse}>\n                <CardBody>\n                  {iframe &&\n                  <Row>\n                    <Col>\n                      {\n                        htmlParse(iframe, {\n                          replace: domNode => {\n                            if (domNode.name === 'iframe') {\n                              domNode.attribs.width = \"100%\";\n                              domNode.attribs.height = \"1024\";\n                            }\n                          }\n                        })\n                      }\n                    </Col>\n                  </Row>\n                  }\n                </CardBody>\n              </Collapse>\n            </Card>\n          </Col>\n        </Row>\n\n      </div>\n    );\n  }\n}\n\nexport default Word;\n"],"sourceRoot":""}